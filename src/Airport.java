import java.util.ArrayList;

public class Airport
{
    /** A list of the flights into and out of this airport
     *  Guaranteed not to be null and to contain only non-null entries
     */
    private ArrayList<Flight> allFlights;

    public Airport(ArrayList<Flight> flights)
    {
        allFlights = flights;
    }

    public ArrayList<Flight> getAllFlights()
    {
        return allFlights;
    }

    /** Returns the revenue generated by all flights at the airport,
     *  as described in part (a)
     */
    public double getTotalRevenue()
    {
        double revenue = 0.0;
        for (Flight flights : allFlights)
        {
            int passenger = flights.getNumPassengers();
            int capacity = flights.getCapacity();
            if (passenger > capacity)
            {
                revenue += capacity * flights.getPrice();
            }
            else
            {
                revenue += passenger * flights.getPrice();
            }
        }
        return revenue;
    }

    /** Updates the list of flights by removing certain flights and
     *  returns the total number of passengers whose flights were removed,
     *  as described in part (b)
     */
    public int updateFlights()
    {
        int removed = 0;
        for (int i = allFlights.size() - 1; i >= 0; i--)
        {
            Flight current = allFlights.get(i);
            int min = (int) (current.getCapacity() * 0.2);
            int passengers = current.getNumPassengers();

            if (passengers < min)
            {
                removed += passengers;
                allFlights.remove(i);
            }
        }
        return removed;
    }
}